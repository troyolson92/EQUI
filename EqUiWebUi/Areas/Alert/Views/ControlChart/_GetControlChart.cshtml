@model EqUiWebUi.Areas.Alert.Models.ChartSettings
<div id="ChartID@(Model.c_trigger_id)">

    <div class="card">
        <div class="card-header bg-light">
            <h6 class="card-title">
                <a class="fas fa-sync-alt text-black-50 ControlChartRefresh clickable" data-toggle="popover" data-placement="bottom" title="Refresh chart"></a>
                <strong>@Model.chartname</strong> Control chart for alarmobject:
                <strong>@Model.alarmobject.Trim()</strong>
                <a class="fas fa-info-circle text-black-50 clickable" id="WikiPopover" data-container="body" data-toggle="popover" data-placement="bottom"  title="Show chart legend and wiki page"></a>
                <a class="fas fa-wrench text-black-50 ControlChartOptionsPopover clickable" data-toggle="popover" data-placement="bottom" title="Set chart options"></a>
                <a class="far fa-calendar-alt text-black-50 ControlChartDatepicker clickable" data-toggle="popover" data-placement="right" title="Set date time range"></a>
                <span class="clickable float-right text-black-50"><i class="fas fa-chevron-circle-up fa-1"></i></span>
            </h6>
        </div>

        <div class="card-body">
            <div class="controlchartContainer" style="position:relative"></div>
        </div>
    </div>

    @*popover content*@
    <div class="d-none ControlChartOptionsPopoverContent">
        <div class="panel panel-body">
            <div class="form-group">
                <label for="ControlchartoptDataDropdown">Show OptDataset</label>
                <select class="form-control ControlchartoptDataDropdown" id="ChartID@(Model.c_trigger_id)ControlchartoptDataDropdown">
                    <option value="0" selected="selected">NoOptData</option>
                    @if (Model.optDataLabels != null)
                    {
                        for (int i = 1; i <= Model.optDataLabels.Count; i++)
                        {
                            <option value="@i">@Model.optDataLabels[i - 1].ToString()</option>
                        }
                    }
                </select>
            </div>
        </div>
    </div>

    @*hidden field*@
    <input type="hidden" name="ControlchartendDate" value="">
    <input type="hidden" name="ControlchartstartDate" value="">
    <input type="hidden" name="ControlchartoptDatanum" value="">
</div>

<!--for chart legend-->
<style>
    .scatter-legend-marker {
        width: 14px;
        height: 14px;
        display: inline-block;
    }
</style>

<!--ControlChartScripts-->
@*https://dima117.github.io/Chart.Scatter/*@
<script src="~/Scripts/Chart.Core.js"></script>
<script src="~/Scripts/Chart.Scatter.js"></script>
<script>
    //Self-Executing Anonymous Functions because this partial might be rendered multiple times on same page.
    (function () {
        //global vars
        var ControlChart;
        var ControlChartOpt;
        $('#ChartID@(Model.c_trigger_id)').find("input[name=ControlchartendDate]").val(moment('@Model.startdate.ToString("o")'));
        $('#ChartID@(Model.c_trigger_id)').find("input[name=ControlchartstartDate]").val(moment('@Model.enddate.ToString("o")'));
        $('#ChartID@(Model.c_trigger_id)').find("input[name=ControlchartoptDatanum]").val(0);

     //setting up datetimePicker
        function setgetcontrolchartDaterangepicker() {
            $('#ChartID@(Model.c_trigger_id)').find('.ControlChartDatepicker').daterangepicker({
                "showWeekNumbers": true,
                "showISOWeekNumbers": true,
                "ranges": {
                    'Last 48 Hours': [moment().subtract(2, 'days'), moment()],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'Last 100 Days': [moment().subtract(100, 'days'), moment()],
                    'Last Year': [moment().subtract(365, 'days'), moment()],
                    'Last 5Year': [moment().subtract(365 * 5, 'days'), moment()]
                },
                "startDate": moment($('#ChartID@(Model.c_trigger_id)').find("input[name=ControlchartendDate]").val()),
                "endDate": moment($('#ChartID@(Model.c_trigger_id)').find("input[name=ControlchartstartDate]").val())

            }, function (end, start, label) {
                console.log("New Control chart end date range selected: " + start.format('YYYY-MM-DD') + " to " + end.format('YYYY-MM-DD') + " (predefined range: " + label + ")");
                $('#ChartID@(Model.c_trigger_id)').find("input[name=ControlchartendDate]").val(end);
                $('#ChartID@(Model.c_trigger_id)').find("input[name=ControlchartstartDate]").val(start);
                //update the chart
                getcontrolchartData();
            });
        };

        //enable popover for settings.
        $('#ChartID@(Model.c_trigger_id)').find(".ControlChartOptionsPopover").popover({
            html: true,
            content: function () {
                return  $('#ChartID@(Model.c_trigger_id)').find('.ControlChartOptionsPopoverContent').html();
            }
        });

        //enable tooltips
        $('[data-toggle="popover"]').tooltip();

        //listen to popover events.
        $(document).on("change", "#ChartID@(Model.c_trigger_id)ControlchartoptDataDropdown", function () {
            if ($('#ChartID@(Model.c_trigger_id)').find("input[name=ControlchartoptDatanum]").val() != this.value) {
                $('#ChartID@(Model.c_trigger_id)').find("input[name=ControlchartoptDatanum]").val(this.value);
                getcontrolchartData();
            };
        });

                
        //enable popover for wiki
         $('#ChartID@(Model.c_trigger_id)').find("#WikiPopover").popover({
            html: true,
            content: function () {
                return "<h6>Chart legend</h6>" +  ControlChart.generateLegend() + "<\hr>" + $.ajax({
                    url: '@Url.Action("_Wiki","c_triggers",new {c_trigger_id = Model.c_trigger_id })',
                    dataType: 'html',
                    async: false
                }).responseText;
            }
        });

        //listen to refresh click event
        $('#ChartID@(Model.c_trigger_id)').find('.ControlChartRefresh').click(function () {
            getcontrolchartData();
        });

        //get chart data
        function getcontrolchartData() {
            //hide popover
            $('#ChartID@(Model.c_trigger_id)').find('.popover').popover('hide');
            //spinner  
            $('#ChartID@(Model.c_trigger_id)').find('.controlchartContainer').html("<div class='card-body'><i class='fa fa-spinner fa-pulse fa-2x fa-fw'></i><span class='sr-only'></span>Loading....</div>");
            //make ajax request
            $.ajax({
                type: 'GET',
                url: '/ControlChart/_getData',
                data: {
                    chartname: '@Model.chartname',
                    scaleLabel: '@Html.Raw(Model.scaleLabel)',
                    startdate: moment($('#ChartID@(Model.c_trigger_id)').find("input[name=ControlchartendDate]").val()).toISOString(),
                    enddate: moment($('#ChartID@(Model.c_trigger_id)').find("input[name=ControlchartstartDate]").val()).toISOString(),
                    alarmobject: '@Model.alarmobject',
                    optDatanum: $('#ChartID@(Model.c_trigger_id)').find("input[name=ControlchartoptDatanum]").val(),
                    c_trigger_id: @Model.c_trigger_id
                },
                success: function (result) {
                    console && console.log("request control chart data succeeded");
                    $('#ChartID@(Model.c_trigger_id)').find('.controlchartContainer').html(""); //hide spinner
                    buildControlchart(result);
                },
                error: function (result) {
                    console.log(result);
                    $('#ChartID@(Model.c_trigger_id)').find('.controlchartContainer').html($("#Error", result.responseText).html());
                }
            });
        };

        //build the chart Calls when ajax request ends
        function buildControlchart(dataPayload) {
            //chart options
            var options =
            {

                // Boolean - Whether the line is curved between points
                bezierCurve: false, //looks bad with control limtit changes
                // Number - Tension of the bezier curve between points
                bezierCurveTension: 0.2,
                showTooltips: true,
                scaleShowHorizontalLines: true,
                scaleShowLabels: true,
                scaleLabel: dataPayload[0].scaleLabel,
                // String - scale type: "number" or "date"
                scaleType: "date",
                // Boolean - Whether to use UTC dates instead local
                useUtc: true,
                // String - short date format (used for scale labels)
                scaleDateFormat: "mm-dd",
                // String - short time format (used for scale labels)
                scaleTimeFormat: "HH:MM",
                // String - full date format (used for point labels)
                scaleDateTimeFormat: "yy-mm-dd HH:MM:ss",
                //for resize
                maintainAspectRatio: false,
                responsive: true
            };

            //dataset (main value)
            var data = [
                {
                    label: dataPayload[0].ValueLabel,
                    strokeColor: '#007ACC',
                   // pointColor: '#007ACC',
                   // pointStrokeColor: '#fff',
                    data: dataPayload[1]
                },
                {
                    label: 'UCL (upper control limit)',
                    strokeColor: '#F16220',
                    data: dataPayload[2]
                },
                {
                    label: 'LCL (lower control limit)',
                    strokeColor: '#F16220',
                    data: dataPayload[3]
                }
            ];

            //add refValue dataset is present
            if (dataPayload[0].RefValueLabel != null) {
                var dataRef = 
                    {
                        label: dataPayload[0].RefValueLabel,
                        strokeColor: '#6f42c1',
                        data: dataPayload[4]
                    };
                data.push(dataRef);
            }

            //for Optdata chart
            var dataOpt = [
                {
                    label: $("#ControlchartoptDataDropdown>option:selected").html(),
                    strokeColor: '#6f42c1',
                    data: dataPayload[5]
                }
            ];

            //destroy chart if exists
            if (ControlChart) {
                ControlChart.destroy();
            }
            if (ControlChartOpt) {
                ControlChartOpt.destroy();
            }
            //clear the canvas just to be sure
            $('#ChartID@(Model.c_trigger_id)').find('.controlchartCanvas').remove();
            $('#ChartID@(Model.c_trigger_id)').find('.controlchartOptCanvas').remove();

            //add the new canvas
            $('#ChartID@(Model.c_trigger_id)').find('.controlchartContainer').append('<canvas class="controlchartCanvas" height="300"></canvas>');
            //build the chart
            var ctxcontrolChart = $('#ChartID@(Model.c_trigger_id)').find('.controlchartCanvas')[0].getContext("2d");
            ControlChart = new Chart(ctxcontrolChart).Scatter(data, options);

            //for opt chart 
            if ($('#ChartID@(Model.c_trigger_id)').find("input[name=ControlchartoptDatanum]").val() != 0) {

                $('#ChartID@(Model.c_trigger_id)').find('.controlchartContainer').append('<canvas class="controlchartOptCanvas"></canvas>');
                var ctxcontrolChartOpt = $('#ChartID@(Model.c_trigger_id)').find('.controlchartOptCanvas')[0].getContext("2d"); 
                ControlChartOpt = new Chart(ctxcontrolChartOpt).Scatter(dataOpt, options);
            }

            //init daterangepicker
            setgetcontrolchartDaterangepicker();
        }

        //init on doc loaded done
        $(document).ready(function () {
            getcontrolchartData();
        });

    })();
</script>


