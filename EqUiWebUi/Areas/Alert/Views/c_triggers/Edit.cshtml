@model EqUiWebUi.Areas.Alert.Models.c_triggers

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@if (Model.id != 0)
{
    <h2>Edit this alert trigger</h2>
}
else
{
    <h2>CREATE NEW alert trigger</h2>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Edit alert trigger id:@Model.id</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.id)

        <div class="card">
            <div class="card-header bg-danger">
                <h5 class="card-title text-white">
                    Basics
                    <span class="clickable float-right"><i class="fas fa-chevron-circle-up fa-1"></i></span>
                </h5>
            </div>
            <div class="card-body">
                <div class="form-group">
                    @Html.LabelFor(model => model.enabled, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.enabled)
                            @Html.ValidationMessageFor(model => model.enabled, "", new { @class = "text-danger" })
                            @Html.HelpTextFor(model => model.enabled)
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.discription, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.discription, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.discription, "", new { @class = "text-danger" })
                        @Html.HelpTextFor(model => model.discription)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.alertType, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.alertType, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.alertType, "", new { @class = "text-danger" })
                        @Html.HelpTextFor(model => model.alertType)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.c_datasource.Name, "RunAgainstDatabase", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("c_datasource_id", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.c_datasource_id, "", new { @class = "text-danger" })
                        @Html.HelpTextFor(model => model.c_datasource.Name)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.sqlStatement, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="panel" style="border:ridge">
                            <textarea id="sqlStatement" name="sqlStatement">@Model.sqlStatement</textarea>
                        </div>
                        @Html.ValidationMessageFor(model => model.sqlStatement, "", new { @class = "text-danger" })
                        @Html.HelpTextFor(model => model.sqlStatement)

                        <p></p>

                        <div class="col-md-10">
                            <button id="checkstatement" type="button" class="btn-sm btn-primary">Checkstatement</button>
                            <button id="Runstatement" type="button" class="btn-sm btn-primary">Runstatement</button>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.initial_state, "initial_state", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("initial_state", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.initial_state, "", new { @class = "text-danger" })
                        @Html.HelpTextFor(model => model.initial_state)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Animation, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Animation, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Animation, "", new { @class = "text-danger" })
                        @Html.HelpTextFor(model => model.Animation)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Cron, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div id="jCron"></div>
                        <p></p>
                        <div>
                            <input class="form-control text-box single-line" id="Cron" name="Cron" type="text" value="">
                        </div>
                        @Html.ValidationMessageFor(model => model.Cron, "", new { @class = "text-danger" })
                        @Html.HelpTextFor(model => model.Cron)
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.AutoSetStateTechComp, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.AutoSetStateTechComp)
                            @Html.ValidationMessageFor(model => model.AutoSetStateTechComp, "", new { @class = "text-danger" })
                            @Html.HelpTextFor(model => model.AutoSetStateTechComp)
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.isDowntime, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.isDowntime)
                            @Html.ValidationMessageFor(model => model.isDowntime, "", new { @class = "text-danger" })
                            @Html.HelpTextFor(model => model.isDowntime)
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.isInReport, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.isInReport)
                            @Html.ValidationMessageFor(model => model.isInReport, "", new { @class = "text-danger" })
                            @Html.HelpTextFor(model => model.isInReport)
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.isDebugmode, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.isDebugmode)
                            @Html.ValidationMessageFor(model => model.isDebugmode, "", new { @class = "text-danger" })
                            @Html.HelpTextFor(model => model.isDebugmode)
                        </div>
                    </div>
                </div>

            </div>
        </div>

        <hr />

        <div class="card">
            <div class="card-header bg-warning">
                <h5 class="card-title text-white">
                    SMS
                    <span class="clickable float-right"><i class="fas fa-chevron-circle-up fa-rotate-180 fa-1"></i></span>
                </h5>
            </div>
            <div class="card-body" style="display:none">

                <div class="form-group">
                    @Html.LabelFor(model => model.enableSMS, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.enableSMS)
                            @Html.ValidationMessageFor(model => model.enableSMS, "", new { @class = "text-danger" })
                            @Html.HelpTextFor(model => model.enableSMS)
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.smsSystem, "smsSystem", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("smsSystem", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.smsSystem, "", new { @class = "text-danger" })
                        @Html.HelpTextFor(model => model.smsSystem)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.smsOnRetrigger, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.smsOnRetrigger)
                            @Html.ValidationMessageFor(model => model.smsOnRetrigger, "", new { @class = "text-danger" })
                            @Html.HelpTextFor(model => model.smsOnRetrigger)
                        </div>
                    </div>
                </div>
                <div>
                    @Html.ActionLink("Go to SMS config", "Index", "c_SMSconfig")
                </div>
            </div>
        </div>


        <hr />

        <div class="card">
            <div class="card-header bg-warning">
                <h5 class="card-title text-white">
                    Control limits
                    <span class="clickable float-right"><i class="fas fa-chevron-circle-up fa-rotate-180 fa-1"></i></span>
                </h5>
            </div>
            <div class="card-body" style="display:block">

                <div class="form-group">
                    @Html.LabelFor(model => model.hasControlLimits, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.hasControlLimits)
                            @Html.ValidationMessageFor(model => model.hasControlLimits, "", new { @class = "text-danger" })
                            @Html.HelpTextFor(model => model.hasControlLimits)
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.controllimitSqlStatement, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="panel" style="border:ridge">
                            <textarea id="controllimitSqlStatement" name="controllimitSqlStatement">@Model.controllimitSqlStatement</textarea>
                        </div>
                        @Html.ValidationMessageFor(model => model.controllimitSqlStatement, "", new { @class = "text-danger" })
                        @Html.HelpTextFor(model => model.controllimitSqlStatement)

                        <p></p>

                        <div class="col-md-10">
                            <button id="checkcontrollimitSqlStatement" type="button" class="btn-sm btn-primary">Check for missing control limits</button>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.controlChartSqlStatement, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="panel" style="border:ridge">
                            <textarea id="controlChartSqlStatement" name="controlChartSqlStatement">@Model.controlChartSqlStatement</textarea>
                        </div>
                        @Html.ValidationMessageFor(model => model.controlChartSqlStatement, "", new { @class = "text-danger" })
                        @Html.HelpTextFor(model => model.controlChartSqlStatement)

                        <p></p>

                        <div class="col-md-10">
                            <button id="checkcontrolChartSqlStatement" type="button" class="btn-sm btn-primary">Check controlChart Statement</button>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.controlChartYlabel, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.controlChartYlabel, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.controlChartYlabel, "", new { @class = "text-danger" })
                        @Html.HelpTextFor(model => model.controlChartYlabel)
                    </div>
                </div>

            </div>
        </div>

        <p></p>

        <div class="form-group">
            <div class="col-md-10">
                <input type="submit" value="Save" class="btn btn-danger" />
            </div>
        </div>
    </div>
}


    <div class="float-right">
        <p><a href="~/Alert/c_triggers/RunAlertTrigger?triggerID=@Model.id" class="btn btn-danger btn-sm JQresultTriggerBtn">Testfire &raquo;</a>(must be saved)</p>

    </div>


<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@*render popuover modal*@
<div id="MyModal" class="modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class='card-body'><i class='fa fa-spinner fa-pulse fa-4x fa-fw text-white'></i><span class='sr-only'>Loading...</span></div>
</div>


@section scripts{
    @*http://codemirror.net/doc/manual.html*@
    <script src="~/Scripts/Codemirror/codemirror.js"></script>
    <link href="~/Content/codemirror/codemirror.css" rel="stylesheet" />
    <link href="~/Content/codemirror/neat.css" rel="stylesheet" />
    <script src="~/Scripts/Codemirror/mode/sql.js"></script>

    @*http://shawnchin.github.io/jquery-cron/*@
    <link href="~/Content/jquery-cron.css" rel="stylesheet" />
    <link href="~/Scripts/gentleSelect/jquery-gentleSelect.css" rel="stylesheet" />
    <script src="~/Scripts/gentleSelect/jquery-gentleSelect.js"></script>
    <script src="~/Scripts/jquery-cron.js"></script>

    <script>
        //for code mirror editor
        //sqlstatement
        var sqlStatementCodeMirror = CodeMirror.fromTextArea(document.getElementById("sqlStatement"), {
            lineNumbers: true,
            mode: "sql",
            theme: "neat"
        });
        //controllimitSqlStatement
        var controllimitSqlStatementCodeMirror = CodeMirror.fromTextArea(document.getElementById("controllimitSqlStatement"), {
            lineNumbers: true,
            mode: "sql",
            theme: "neat"
        });
        //controlChartSqlStatement
        var controlChartSqlStatementCodeMirror = CodeMirror.fromTextArea(document.getElementById("controlChartSqlStatement"), {
            lineNumbers: true,
            mode: "sql",
            theme: "neat"
        });
        //for jcron editor
        $('#jCron').cron({
            initial: "@(Model.Cron == null ? "0 * * * *" : Model.Cron)",
            onChange: function () {
                $('#Cron').val($(this).cron("value"));
            }
        });

        //for check statement
        //on Runstatement show the user the result from the alert sql statement
        $('#Runstatement').click(function () {
                //launch modal
                $('#MyModal').removeData('bs.modal');
                $('#MyModal').modal({ show: true });
                $('#MyModal').load('@Url.Action("_dynamicWebgridRunQueryAgainstDB", "Dynamic", new { area = "" })'
                    , { qry: sqlStatementCodeMirror.getValue(), db: $('#c_datasource_id').val() }
                    , function (result) { }
                );
        });
        //on checkstatement show the user if all mandatory columns are there
        var mandatorytriggerColumns = new Array();
        mandatorytriggerColumns[0] = "timestamp";
        mandatorytriggerColumns[1] = "item2";
        mandatorytriggerColumns[2] = "item3";
        $('#checkstatement').click(function () {
            //launch modal
            $('#MyModal').removeData('bs.modal');
            $('#MyModal').modal({ show: true });
            $('#MyModal').load('@Url.Action("_CheckStatement", "Dynamic", new { area = "" })'
                , { qry: sqlStatementCodeMirror.getValue(), db: $('#c_datasource_id').val() }
                , function (result) { }
            );
        });


         //on Runstatement show the user the result from the alert sql statement
        $('#checkcontrollimitSqlStatement').click(function () {
                //launch modal
                $('#MyModal').removeData('bs.modal');
                $('#MyModal').modal({ show: true });
                $('#MyModal').load('@Url.Action("_dynamicWebgridRunQueryAgainstDB", "Dynamic", new { area = "" })'
                    , { qry: controllimitSqlStatementCodeMirror.getValue(), db: $('#c_datasource_id').val() }
                    , function (result) { }
                );
        });

       //clear on close
        //on modal close
        $('#MyModal').on('hidden.bs.modal', function (e) {
            $('#MyModal').html("<div class='card-body'><i class='fa fa-spinner fa-pulse fa-4x fa-fw text-white' ></i ><span class='sr-only'>Loading...</span></div >");
        });
    </script>
}
