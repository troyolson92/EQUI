//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EqUiWebUi.Areas.PlcSupervisie.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GADATAEntities1 : DbContext
    {
        public GADATAEntities1()
            : base("name=GADATAEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<EQpluginNewformat1_Result> EQpluginNewformat1(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> daysBack, string assets, string locations, string lochierarchy, Nullable<bool> timeline, Nullable<bool> excludeOperational, Nullable<bool> c3gError, Nullable<bool> c4gError, Nullable<bool> c3gBreakdown, Nullable<bool> c4gBreakdown, Nullable<bool> c3gBreakdownStart, Nullable<bool> c4gBreakdownStart, Nullable<bool> c3gSysState, Nullable<bool> c4gSysState, Nullable<bool> c3gMOD, Nullable<bool> c4gMOD, Nullable<bool> c3gSBCU, Nullable<bool> getshiftbook, Nullable<bool> active, Nullable<bool> stw040, Nullable<int> minLogserv, Nullable<int> minDowntime)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var daysBackParameter = daysBack.HasValue ?
                new ObjectParameter("daysBack", daysBack) :
                new ObjectParameter("daysBack", typeof(int));
    
            var assetsParameter = assets != null ?
                new ObjectParameter("assets", assets) :
                new ObjectParameter("assets", typeof(string));
    
            var locationsParameter = locations != null ?
                new ObjectParameter("locations", locations) :
                new ObjectParameter("locations", typeof(string));
    
            var lochierarchyParameter = lochierarchy != null ?
                new ObjectParameter("lochierarchy", lochierarchy) :
                new ObjectParameter("lochierarchy", typeof(string));
    
            var timelineParameter = timeline.HasValue ?
                new ObjectParameter("timeline", timeline) :
                new ObjectParameter("timeline", typeof(bool));
    
            var excludeOperationalParameter = excludeOperational.HasValue ?
                new ObjectParameter("ExcludeOperational", excludeOperational) :
                new ObjectParameter("ExcludeOperational", typeof(bool));
    
            var c3gErrorParameter = c3gError.HasValue ?
                new ObjectParameter("c3gError", c3gError) :
                new ObjectParameter("c3gError", typeof(bool));
    
            var c4gErrorParameter = c4gError.HasValue ?
                new ObjectParameter("c4gError", c4gError) :
                new ObjectParameter("c4gError", typeof(bool));
    
            var c3gBreakdownParameter = c3gBreakdown.HasValue ?
                new ObjectParameter("c3gBreakdown", c3gBreakdown) :
                new ObjectParameter("c3gBreakdown", typeof(bool));
    
            var c4gBreakdownParameter = c4gBreakdown.HasValue ?
                new ObjectParameter("c4gBreakdown", c4gBreakdown) :
                new ObjectParameter("c4gBreakdown", typeof(bool));
    
            var c3gBreakdownStartParameter = c3gBreakdownStart.HasValue ?
                new ObjectParameter("c3gBreakdownStart", c3gBreakdownStart) :
                new ObjectParameter("c3gBreakdownStart", typeof(bool));
    
            var c4gBreakdownStartParameter = c4gBreakdownStart.HasValue ?
                new ObjectParameter("c4gBreakdownStart", c4gBreakdownStart) :
                new ObjectParameter("c4gBreakdownStart", typeof(bool));
    
            var c3gSysStateParameter = c3gSysState.HasValue ?
                new ObjectParameter("c3gSysState", c3gSysState) :
                new ObjectParameter("c3gSysState", typeof(bool));
    
            var c4gSysStateParameter = c4gSysState.HasValue ?
                new ObjectParameter("c4gSysState", c4gSysState) :
                new ObjectParameter("c4gSysState", typeof(bool));
    
            var c3gMODParameter = c3gMOD.HasValue ?
                new ObjectParameter("c3gMOD", c3gMOD) :
                new ObjectParameter("c3gMOD", typeof(bool));
    
            var c4gMODParameter = c4gMOD.HasValue ?
                new ObjectParameter("c4gMOD", c4gMOD) :
                new ObjectParameter("c4gMOD", typeof(bool));
    
            var c3gSBCUParameter = c3gSBCU.HasValue ?
                new ObjectParameter("c3gSBCU", c3gSBCU) :
                new ObjectParameter("c3gSBCU", typeof(bool));
    
            var getshiftbookParameter = getshiftbook.HasValue ?
                new ObjectParameter("getshiftbook", getshiftbook) :
                new ObjectParameter("getshiftbook", typeof(bool));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            var stw040Parameter = stw040.HasValue ?
                new ObjectParameter("stw040", stw040) :
                new ObjectParameter("stw040", typeof(bool));
    
            var minLogservParameter = minLogserv.HasValue ?
                new ObjectParameter("MinLogserv", minLogserv) :
                new ObjectParameter("MinLogserv", typeof(int));
    
            var minDowntimeParameter = minDowntime.HasValue ?
                new ObjectParameter("MinDowntime", minDowntime) :
                new ObjectParameter("MinDowntime", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EQpluginNewformat1_Result>("EQpluginNewformat1", startDateParameter, endDateParameter, daysBackParameter, assetsParameter, locationsParameter, lochierarchyParameter, timelineParameter, excludeOperationalParameter, c3gErrorParameter, c4gErrorParameter, c3gBreakdownParameter, c4gBreakdownParameter, c3gBreakdownStartParameter, c4gBreakdownStartParameter, c3gSysStateParameter, c4gSysStateParameter, c3gMODParameter, c4gMODParameter, c3gSBCUParameter, getshiftbookParameter, activeParameter, stw040Parameter, minLogservParameter, minDowntimeParameter);
        }
    }
}
